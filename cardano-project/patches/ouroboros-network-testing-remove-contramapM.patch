diff --git a/src/Test/Ouroboros/Network/Utils.hs b/src/Test/Ouroboros/Network/Utils.hs
--- a/src/Test/Ouroboros/Network/Utils.hs
+++ b/src/Test/Ouroboros/Network/Utils.hs
@@ -48,7 +48,9 @@
 import Control.Monad.Class.MonadSay
 import Control.Monad.Class.MonadTime.SI
 import Control.Monad.IOSim (IOSim, traceM)
-import Control.Tracer (Contravariant (contramap), Tracer (..), contramapM)
+import Control.Category ((>>>))
+import Control.Tracer (Contravariant (contramap), Tracer (..))
+import qualified Control.Tracer.Arrow as Arrow
 
 import Data.Bitraversable (bimapAccumR)
 import Data.List (delete, nub)
@@ -70,6 +72,9 @@
 import Test.Tasty.ExpectedFailure (ignoreTest)
 
 
+contramapM :: Monad m => (a -> m b) -> Tracer m b -> Tracer m a
+contramapM f (Tracer tr) = Tracer (Arrow.effect f >>> tr)
+
 newtype Delay = Delay { getDelay :: DiffTime }
   deriving Show
   deriving newtype (Eq, Ord, Num, Fractional, Real)
@@ -194,7 +199,7 @@
 instance Show event => Show (WithTime event) where
   show (WithTime (Time t) ev) = show t <> " @ " <> show ev
 
-tracerWithName :: name -> Tracer m (WithName name a) -> Tracer m a
+tracerWithName :: Monad m => name -> Tracer m (WithName name a) -> Tracer m a
 tracerWithName name = contramap (WithName name)
 
 tracerWithTime :: MonadMonotonicTime m => Tracer m (WithTime a) -> Tracer m a
@@ -260,10 +265,10 @@
 --
 
 debugTracer :: ( Show a, Applicative m) => Tracer m a
-debugTracer = Tracer traceShowM
+debugTracer = Tracer (Arrow.emit traceShowM)
 
 sayTracer :: ( Show a, MonadSay m) => Tracer m a
-sayTracer = Tracer (say . show)
+sayTracer = Tracer (Arrow.emit (say . show))
 
 -- | Redefine this tracer to get valuable tracing information from various
 -- components:
@@ -273,8 +278,8 @@
 -- * server
 --
 debugTracerG :: (Show a, Typeable a) => Tracer (IOSim s) a
-debugTracerG =    Tracer (\msg -> getCurrentTime >>= say . show . (,msg))
-               <> Tracer traceM
+debugTracerG =    Tracer (Arrow.effect (\msg -> getCurrentTime >>= say . show . (,msg)))
+               <> Tracer (Arrow.emit traceM)
             -- <> Tracer Debug.traceShowM
 
 --
