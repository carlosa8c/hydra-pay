--- a/src/Test/Ouroboros/Network/Utils.hs
+++ b/src/Test/Ouroboros/Network/Utils.hs
@@ -40,7 +40,9 @@ module Test.Ouroboros.Network.Utils
 
 import Control.Monad.Class.MonadSay
 import Control.Monad.Class.MonadTime.SI
-import Control.Tracer (Contravariant (contramap), Tracer (..), contramapM)
+import Control.Tracer (Contravariant (contramap), Tracer (..), arrow, traceWith)
+import Control.Tracer.Arrow (effect, emit)
+import Control.Category ((>>>))
 
 import Data.Bitraversable (bimapAccumR)
 import Data.List (delete)
@@ -62,7 +64,11 @@ import Test.QuickCheck
 import Test.Tasty (TestTree)
 import Test.Tasty.ExpectedFailure (ignoreTest)
 
-
+-- | Helper function to replace contramapM (removed in contra-tracer 0.2.0)
+-- This uses the new arrow-based API to achieve the same effect
+contramapM :: Monad m => (a -> m b) -> Tracer m b -> Tracer m a
+contramapM f tr = arrow (effect f >>> emit (traceWith tr))
+
 newtype Delay = Delay { getDelay :: DiffTime }
   deriving Show
   deriving newtype (Eq, Ord, Num)
@@ -194,7 +200,8 @@ instance Show event => Show (WithTime event) where
 instance Show event => Show (WithTime event) where
   show (WithTime (Time t) ev) = show t <> " @ " <> show ev
 
-tracerWithName :: name -> Tracer m (WithName name a) -> Tracer m a
+-- GHC 9.6 requires explicit Monad constraint for contramap
+tracerWithName :: Monad m => name -> Tracer m (WithName name a) -> Tracer m a
 tracerWithName name = contramap (WithName name)
 
 tracerWithTime :: MonadMonotonicTime m => Tracer m (WithTime a) -> Tracer m a
@@ -259,10 +266,10 @@ halfNormalised = normalizeRational . halfRational
 --
 
 debugTracer :: ( Show a, Applicative m) => Tracer m a
-debugTracer = Tracer traceShowM
+debugTracer = arrow (emit traceShowM)
 
 sayTracer :: ( Show a, MonadSay m) => Tracer m a
-sayTracer = Tracer (say . show)
+sayTracer = arrow (emit (say . show))
 
 debugTracerG :: (Show a, Typeable a) => Tracer (IOSim s) a
 debugTracerG =    Tracer (\msg -> getCurrentTime >>= say . show . (,msg))
