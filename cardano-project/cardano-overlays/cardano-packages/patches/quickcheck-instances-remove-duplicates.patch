From d9291a102ecb89caae24d261b26ff26c833d6eba Mon Sep 17 00:00:00 2001
From: Carlos Cabrera <carlos@tumblr.com>
Date: Wed, 29 Oct 2025 10:28:20 -0400
Subject: [PATCH] remove duplicate Arbitrary instances conflicting with
 QuickCheck >=2.14

---
 src/Test/QuickCheck/Instances/Array/Byte.hs |   4 -
 src/Test/QuickCheck/Instances/Natural.hs    |  25 ----
 src/Test/QuickCheck/Instances/Semigroup.hs  | 126 --------------------
 src/Test/QuickCheck/Instances/Solo.hs       |  23 ----
 4 files changed, 178 deletions(-)
 delete mode 100644 src/Test/QuickCheck/Instances/Array/Byte.hs
 delete mode 100644 src/Test/QuickCheck/Instances/Natural.hs
 delete mode 100644 src/Test/QuickCheck/Instances/Semigroup.hs
 delete mode 100644 src/Test/QuickCheck/Instances/Solo.hs

diff --git a/src/Test/QuickCheck/Instances/Array/Byte.hs b/src/Test/QuickCheck/Instances/Array/Byte.hs
deleted file mode 100644
index 746b9ca..0000000
--- a/src/Test/QuickCheck/Instances/Array/Byte.hs
+++ /dev/null
@@ -1,4 +0,0 @@
-module Test.QuickCheck.Instances.Array.Byte () where
-
-import Prelude ()
-import Test.QuickCheck.Instances.Primitive ()
diff --git a/src/Test/QuickCheck/Instances/Natural.hs b/src/Test/QuickCheck/Instances/Natural.hs
deleted file mode 100644
index a7c627e..0000000
--- a/src/Test/QuickCheck/Instances/Natural.hs
+++ /dev/null
@@ -1,25 +0,0 @@
-{-# OPTIONS_GHC -fno-warn-orphans #-}
-module Test.QuickCheck.Instances.Natural () where
-
-import Prelude ()
-
-import Numeric.Natural (Natural)
-
-import Test.QuickCheck
-       (Arbitrary (..), CoArbitrary (..), arbitrarySizedNatural,
-       coarbitraryIntegral, shrinkIntegral)
-import Test.QuickCheck.Function (Function (..), functionIntegral)
-
--------------------------------------------------------------------------------
--- nats
--------------------------------------------------------------------------------
-
-instance Arbitrary Natural where
-  arbitrary = arbitrarySizedNatural
-  shrink    = shrinkIntegral
-
-instance CoArbitrary Natural where
-  coarbitrary = coarbitraryIntegral
-
-instance Function Natural where
-  function = functionIntegral
diff --git a/src/Test/QuickCheck/Instances/Semigroup.hs b/src/Test/QuickCheck/Instances/Semigroup.hs
deleted file mode 100644
index 2944f27..0000000
--- a/src/Test/QuickCheck/Instances/Semigroup.hs
+++ /dev/null
@@ -1,126 +0,0 @@
-{-# LANGUAGE CPP #-}
-{-# OPTIONS_GHC -fno-warn-orphans #-}
-module Test.QuickCheck.Instances.Semigroup () where
-
-import Prelude ()
-import Test.QuickCheck.Instances.CustomPrelude
-
-import Control.Applicative (liftA2)
-import Data.List.NonEmpty  (NonEmpty (..), nonEmpty)
-import Data.Maybe          (mapMaybe)
-
-import Test.QuickCheck
-
-import qualified Data.Semigroup as Semi
-
--------------------------------------------------------------------------------
--- semigroups
--------------------------------------------------------------------------------
-
-instance Arbitrary1 NonEmpty where
-  liftArbitrary arb = liftA2 (:|) arb (liftArbitrary arb)
-  liftShrink shr (x :| xs) = mapMaybe nonEmpty . liftShrink shr $ x : xs
-
-instance Arbitrary a => Arbitrary (NonEmpty a) where
-  arbitrary = arbitrary1
-  shrink = shrink1
-
-instance CoArbitrary a => CoArbitrary (NonEmpty a) where
-  coarbitrary (x :| xs) = coarbitrary (x, xs)
-
-instance Function a => Function (NonEmpty a) where
-  function = functionMap g h
-   where
-     g (x :| xs) = (x,   xs)
-     h (x,   xs) =  x :| xs
-
-
-instance Arbitrary1 Semi.Min where
-    liftArbitrary arb = Semi.Min <$> arb
-    liftShrink shr = map Semi.Min . shr . Semi.getMin
-
-instance Arbitrary a => Arbitrary (Semi.Min a) where
-    arbitrary = arbitrary1
-    shrink = shrink1
-
-instance CoArbitrary a => CoArbitrary (Semi.Min a) where
-    coarbitrary = coarbitrary . Semi.getMin
-
-instance Function a => Function (Semi.Min a) where
-    function = functionMap Semi.getMin Semi.Min
-
-
-instance Arbitrary1 Semi.Max where
-    liftArbitrary arb = Semi.Max <$> arb
-    liftShrink shr = map Semi.Max . shr . Semi.getMax
-
-instance Arbitrary a => Arbitrary (Semi.Max a) where
-    arbitrary = arbitrary1
-    shrink = shrink1
-
-instance CoArbitrary a => CoArbitrary (Semi.Max a) where
-    coarbitrary = coarbitrary . Semi.getMax
-
-instance Function a => Function (Semi.Max a) where
-    function = functionMap Semi.getMax Semi.Max
-
-
-instance Arbitrary1 Semi.First where
-    liftArbitrary arb = Semi.First <$> arb
-    liftShrink shr = map Semi.First . shr . Semi.getFirst
-
-instance Arbitrary a => Arbitrary (Semi.First a) where
-    arbitrary = arbitrary1
-    shrink = shrink1
-
-instance CoArbitrary a => CoArbitrary (Semi.First a) where
-    coarbitrary = coarbitrary . Semi.getFirst
-
-instance Function a => Function (Semi.First a) where
-    function = functionMap Semi.getFirst Semi.First
-
-
-instance Arbitrary1 Semi.Last where
-    liftArbitrary arb = Semi.Last <$> arb
-    liftShrink shr = map Semi.Last . shr . Semi.getLast
-
-instance Arbitrary a => Arbitrary (Semi.Last a) where
-    arbitrary = arbitrary1
-    shrink = shrink1
-
-instance CoArbitrary a => CoArbitrary (Semi.Last a) where
-    coarbitrary = coarbitrary . Semi.getLast
-
-instance Function a => Function (Semi.Last a) where
-    function = functionMap Semi.getLast Semi.Last
-
-
-instance Arbitrary1 Semi.WrappedMonoid where
-    liftArbitrary arb = Semi.WrapMonoid <$> arb
-    liftShrink shr = map Semi.WrapMonoid . shr . Semi.unwrapMonoid
-
-instance Arbitrary a => Arbitrary (Semi.WrappedMonoid a) where
-    arbitrary = arbitrary1
-    shrink = shrink1
-
-instance CoArbitrary a => CoArbitrary (Semi.WrappedMonoid a) where
-    coarbitrary = coarbitrary . Semi.unwrapMonoid
-
-instance Function a => Function (Semi.WrappedMonoid a) where
-    function = functionMap Semi.unwrapMonoid Semi.WrapMonoid
-
-#if !(MIN_VERSION_base(4,16,0))
-instance Arbitrary1 Semi.Option where
-    liftArbitrary arb = Semi.Option <$> liftArbitrary arb
-    liftShrink shr = map Semi.Option . liftShrink shr . Semi.getOption
-
-instance Arbitrary a => Arbitrary (Semi.Option a) where
-    arbitrary = arbitrary1
-    shrink = shrink1
-
-instance CoArbitrary a => CoArbitrary (Semi.Option a) where
-    coarbitrary = coarbitrary . Semi.getOption
-
-instance Function a => Function (Semi.Option a) where
-    function = functionMap Semi.getOption Semi.Option
-#endif
diff --git a/src/Test/QuickCheck/Instances/Solo.hs b/src/Test/QuickCheck/Instances/Solo.hs
deleted file mode 100644
index c4f9183..0000000
--- a/src/Test/QuickCheck/Instances/Solo.hs
+++ /dev/null
@@ -1,23 +0,0 @@
-{-# OPTIONS_GHC -fno-warn-orphans #-}
-module Test.QuickCheck.Instances.Solo () where
-
-import Prelude ()
-import Test.QuickCheck.Instances.CustomPrelude
-
-import Data.Tuple.Solo (Solo (MkSolo), getSolo)
-
-import Test.QuickCheck
-
-instance Arbitrary1 Solo where
-  liftArbitrary = fmap MkSolo
-  liftShrink shr = map MkSolo . shr . getSolo
-
-instance Arbitrary a => Arbitrary (Solo a) where
-  arbitrary = arbitrary1
-  shrink = shrink1
-
-instance CoArbitrary a => CoArbitrary (Solo a) where
-  coarbitrary = coarbitrary . getSolo
-
-instance Function a => Function (Solo a) where
-  function = functionMap getSolo MkSolo
-- 
2.39.2

